@page "/checkout"
@inject OrderState OrderState
@inject OrdersClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="main">
    <EditForm Model="OrderState.ActiveOrder.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.ActiveOrder" />
            </div>
            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.ActiveOrder.DeliveryAddress" />
            </div>
        </div>
        <button type="submit" class="checkout-button btn btn-warning" disabled="@(IsSubmitting)">
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    bool IsSubmitting = false;

    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task PlaceOrder()
    {
        IsSubmitting = true;
        try
        {
            var orderId = await HttpClient.PlaceOrder(OrderState.ActiveOrder);

            IsSubmitting = false;

            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"/myorders/{orderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await HttpClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
}
